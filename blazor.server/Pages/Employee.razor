@page "/employees"

@inject IJSRuntime JSRuntime
@inject blazor.dapper.IDapperRepository dapperRepository
@inject IEmployeeHelpers employeeHelpers

@using BlazorApp.Helper;
@using BlazorApp.Helpers;
@using blazor.models.Responses;

<div class="row">
    <div class="col-md-8">
        <h3>Employee List</h3>
    </div>
    <div class="col-md-2 text-right">
        <button class="btn btn-primary" @onclick="() => OpenEditModal(new EmployeesResponse() { DOB = DateTime.Now })">Add Employee</button>
    </div>
    <div class="col-md-2 text-right">
        <button class="btn btn-primary" @onclick="() => OpenSelectedEmployee()">Show Employee</button>
    </div>
</div>

@if (Employees == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    <input type="checkbox" @bind="IsAllSelected" @onclick="SelectAllEmployees" />
                </th>
                <th>Name</th>
                <th>Department</th>
                <th>DOB</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in Employees)
            {
                <tr>
                    <td>
                        <input type="checkbox" checked="@(empIds.Contains(employee.Id))" @onclick="() => SelectEmpId(employee.Id)" />
                    </td>
                    <td>@employee.Name</td>
                    <td>@employee.Department</td>
                    <td>@employee.DOB.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-primary" @onclick="()=>OpenEditModal(employee)">Edit</button>
                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteEmployeePopup(employee.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Show Employee Modal -->
    <div class="modal fade" id="showEmployeeModal" tabindex="-1" role="dialog" aria-labelledby="showEmployeeModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="showEmployeeModal">Show Employees</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Department</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var id in empIds)
                            {
                                EmployeesResponse showEmp = Employees.FirstOrDefault(f => f.Id.Equals(id))!;
                                <tr>
                                    <td>@showEmp.Name</td>
                                    <td>@showEmp.Department</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Add-Edit Employee Modal -->
    <div class="modal fade" id="addEditEmployeeModal" tabindex="-1" role="dialog" aria-labelledby="editEmployeeModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editEmployeeModalLabel">Add-Edit Employee</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="name">Name:</label>
                        <input type="text" class="form-control" id="name" @bind="addEditEmployee.Name">
                    </div>
                    <div class="form-group">
                        <label for="Department">Department:</label>
                        <select class="form-control" id="department" @bind="addEditEmployee.Department">
                            <option value="">Select Department</option>
                            @foreach (var department in Departments)
                            {
                                <option value="@department">@department</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="dob">Date of Birth:</label>
                        <input type="date" class="form-control" id="dob" @bind="addEditEmployee.DOB" />
                    </div>
                    <div class="form-group">
                        <label>Gender:</label>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" id="male" value="Male" checked="@IsMale" @onchange="OnGenderChanged">
                            <label class="form-check-label" for="male">Male</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" id="female" value="Female" checked="@IsFemale" @onchange="OnGenderChanged">
                            <label class="form-check-label" for="female">Female</label>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="InsertUpdateEmployee">Save changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Employee Modal -->
    <div class="modal fade" id="deleteEmployeeModal" tabindex="-1" role="dialog" aria-labelledby="deleteEmployeeModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteEmployeeModalLabel">Delete Employee</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this employee?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteEmployee">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<EmployeesResponse> Employees;
    private EmployeesResponse addEditEmployee = new EmployeesResponse() { DOB = DateTime.Now };
    private bool IsAllSelected = false;
    private int deletedEmployee;
    private bool IsMale => addEditEmployee.Gender == "Male";
    private bool IsFemale => addEditEmployee.Gender == "Female";
    private List<string> Departments = new List<string> { "IT", "HR", "Finance" };
    private List<int> empIds = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        Employees = await employeeHelpers.GetEmployeesList();
    }

    private void SelectAllEmployees()
    {
        if (!IsAllSelected)
        {
            IsAllSelected = !IsAllSelected;
            empIds = Employees.Select(s => s.Id).ToList();
        }
        else
        {
            empIds = new List<int>();
            IsAllSelected = !IsAllSelected;
        }
    }

    private async Task DeleteEmployeePopup(int employeeId)
    {
        deletedEmployee = employeeId;
        await JSRuntime.InvokeVoidAsync("openPopup", "deleteEmployeeModal");
    }

    private async Task DeleteEmployee()
    {
        await employeeHelpers.DeleteEmployee(deletedEmployee);
        await JSRuntime.InvokeVoidAsync("closePopup", "deleteEmployeeModal");
        Employees = await employeeHelpers.GetEmployeesList();
    }

    private async Task InsertUpdateEmployee()
    {
        await employeeHelpers.InsertUpdateEmployee(addEditEmployee);
        await JSRuntime.InvokeVoidAsync("closePopup", "addEditEmployeeModal");
        Employees = await employeeHelpers.GetEmployeesList();
    }

    private void OpenEditModal(EmployeesResponse emp)
    {
        addEditEmployee = emp;
        JSRuntime.InvokeVoidAsync("openPopup", "addEditEmployeeModal");
    }

    private void OnGenderChanged(ChangeEventArgs e)
    {
        addEditEmployee.Gender = e.Value.ToString();
    }

    private void OpenSelectedEmployee()
    {
        JSRuntime.InvokeVoidAsync("openPopup", "showEmployeeModal");
    }

    private void SelectEmpId(int id)
    {
        if (!empIds.Contains(id))
            empIds.Add(id);
        else
            empIds.Remove(id);

        IsAllSelected = empIds.Count == Employees.Count;
    }
}
